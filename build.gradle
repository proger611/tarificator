buildscript {
    ext {
        springBootVersion = '2.1.5.RELEASE'
        springCloudVersion = 'Greenwich.SR1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


group = 'ru.rt.eip'
version = '1.0.1'
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "$nexusMainUrl" }
    maven { url "$nexusReleasesUrl" }
}

configurations {
    providedRuntime
}

springBoot {
    buildInfo()
}

dependencies {
    def zone = project.findProperty('zone')
    switch (zone) {
        case "kubernetes":
            implementation('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
            implementation('org.springframework.cloud:spring-cloud-starter-kubernetes-all')
            break
        default:
            implementation('org.springframework.cloud:spring-cloud-starter-config')
            implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    }
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.cloud:spring-cloud-starter-openfeign')
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
    implementation('org.springframework.boot:spring-boot-configuration-processor')
    implementation('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    // swaggger
    implementation('io.springfox:springfox-swagger-ui:2.7.0')
    implementation('io.springfox:springfox-swagger2:2.7.0')
    implementation('io.springfox:springfox-data-rest:2.7.0')
    //logging
    implementation('ch.qos.logback:logback-classic:1.2.3')
    implementation('ch.qos.logback:logback-core:1.2.3')
    implementation('net.logstash.logback:logstash-logback-encoder:5.0')
    implementation('ch.qos.logback:logback-classic:1.2.3')
    implementation('ch.qos.logback:logback-core:1.2.3')
    implementation('net.logstash.logback:logstash-logback-encoder:5.0')

    //prometheus metrics
    implementation('io.micrometer:micrometer-registry-prometheus')

    //mapstruct
    compileOnly('org.mapstruct:mapstruct:1.3.0.Final')
    annotationProcessor('org.mapstruct:mapstruct-processor:1.3.0.Final')
    testAnnotationProcessor('org.mapstruct:mapstruct-processor:1.3.0.Final')

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation('com.h2database:h2')
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    // junit
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
    testImplementation('org.junit.platform:junit-platform-commons')

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "local"
}

docker {
    dependsOn clean
    dependsOn bootJar
    name "boot/${jar.archiveBaseName.get()}"
    tag "${project.name}", "boot/${jar.archiveBaseName.get()}:${project.version}"
    files jar.archiveFile.get()
    dockerfile file('Dockerfile')
    buildArgs(['ARTIFACT': "${jar.archiveFileName.get()}"])
}
